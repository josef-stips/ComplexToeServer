//server
const { instrument } = require('@socket.io/admin-ui');

const path = require('path');
const http = require('http');
const express = require('express');

const App = express();
const server = http.createServer(App);
const PORT = process.env.PORT || 3000;

const { Server } = require('socket.io');
const io = new Server(server, {
    cors: {
        origin: ["https://admin.socket.io"],
        credentials: true,
    },
});

// dev
instrument(io, {
    auth: {
        type: "basic",
        username: "admin",
        password: "$2b$10$qoNcQaDE/Ri9B5Q40JQVHuWQV4Vzm6da8Tiwh50SIYiK/0N7CLYxG",
    },
    mode: 'development'
});

App.use(express.static(path.join(__dirname, '/script/public')));

// server listen
server.listen(PORT, () => {
    console.log(`listening on *:${PORT}`);
});

// Server data
// There are two objects for rooms
// In "Rooms" there are all room ids and in "RoomData" for each room the data 
let ServerData = {
    Rooms: [
        // Example:
        // '123456',
    ],

    // For each room the data
    RoomData: {
        // Example:
        // '123456': {
        //     'id': 123456,
        //     'players': {
        //         1: { 'name': 'Josef', 'icon': 'X', 'role': 'admin', socket: '' },
        //         2: { 'name': 'Josef', 'icon': 'J', 'role': 'user', socket: '' },
        //         
        // socket is the id, auto-generated by socket.io
        //
        //     },
        // }
    }
}; // !Important: The id of a room is always a number 

// Websocket 
io.on('connection', socket => {
    console.log('a user connected to the server ' + socket.id);

    // player disconnected from the lobby
    socket.on('disconnect', () => {
        console.log('user disconnected from the server');
    });

    // create game room (lobby) and its game code
    socket.on('create_room', (PlayerData, callback) => { // create room with its id
        console.log(ServerData.Rooms, ServerData.RoomData)

        const min = 100000;
        const max = 999999;

        let roomID = createID(min, max);

        if (!ServerData.Rooms.includes(roomID)) {

            // Data handling
            ServerData.Rooms.push(roomID);

            // create Room data with its player data
            ServerData.RoomData[roomID] = {
                'id': roomID,
                'players': {
                    1: { 'name': PlayerData[0], 'icon': PlayerData[1], 'role': 'admin', 'socket': socket.id }, // You who created the room
                    2: { 'name': '', 'icon': '', 'role': 'user', 'socket': '' } // Your friend who will join the room
                },
            };

            // join room as admin because your the creator
            socket.join(roomID);

            console.log(roomID)

            // Inform and update the page of all other people who are clients of the room about the name of the admin
            io.to(roomID).emit('Admin_Created_And_Joined', PlayerData[0]); // PlayerData[0] => name of admin

        } else {
            createID(min, max);
        };

        callback(roomID);
    });

    // try to enter a room. If room exists, the player enters the room but still needs to confirm his user data
    socket.on('TRY_enter_room', (GameID, callback) => { // the id the user parsed into the input field

        if (ServerData.Rooms.includes(parseInt(GameID))) { // check if room exists

            // check if the room is full. (over 2 player => full)
            if (io.sockets.adapter.rooms.get(parseInt(GameID)).size == 1) {
                // join room
                socket.join(parseInt(GameID));

                // callback to client who wants to join
                callback(['room exists', GameID]);

            } else { // room is full
                callback([`You can't join`]);
            };

        } else if (!ServerData.Rooms.includes(parseInt(GameID))) { // room does not exists, alert user
            // callback to client who wants to join
            callback(['no room found']);
        };
    });

    // If the room existed, the user joined and setted up his data, this emit listener storages the data on the server
    // And it informs all player in the room about player 2 (user) and player 1 (admin)
    // data[0] = room id ; data[1] = player name ; data[2] = player icon
    socket.on('CONFIRM_enter_room', (data, callback) => {
        // save data in object
        // The 'role' is already declared when the room was created by the admin
        ServerData.RoomData[data[0]]['players'][2]['name'] = data[1]; // set user name
        ServerData.RoomData[data[0]]['players'][2]['icon'] = data[2]; // set user icon
        ServerData.RoomData[data[0]]['players'][2]['socket'] = socket.id; // set user socket.id

        // updates the html of all players in the room with the name of the second player
        io.to(parseInt(data[0])).emit('SecondPlayer_Joined', [data[1], ServerData.RoomData[data[0]]['players'][1]['name']]); // second parameter => name of admin

        callback([data[1], ServerData.RoomData[data[0]]['players'][1]['name']]);
    });

    // user leaves lobby. if admin leaves lobby => room gets killes and all users in there gets kicked out
    socket.on('user_left_lobby', (user, roomID, callback) => {
        if (user == 'admin') {
            // Room gets deleted from the global room arrays "Rooms" and "RoomData" in the "ServerData" Object
            kill_room(parseInt(roomID));

            // send a function to the other person of the room so their html updates properly
            io.to(roomID).emit('killed_room');

            // kicks out all player so the room gets deleted from the server
            io.socketsLeave(roomID);

            // callback to frontend
            callback('You killed the lobby');

        } else if (user == 'user') { // user kicks himself from the lobby
            // user just leaves
            socket.leave(parseInt(roomID));

            // inform all other players that you left
            io.to(parseInt(roomID)).emit('INFORM_user_left_room'); // second parameter => name of admin

            // callback to frontend to update the data of the user who left
            callback('You just left the game');
        };
    });
});

// generates ID for the room
const createID = (min, max) => { let = roomID = Math.floor(Math.random() * (max - min + 1)) + min; return roomID; };

// player kills room which he created before
// It gets killen from the costum Server Object "ServerData"
const kill_room = id => {
    const index = ServerData.Rooms.indexOf(id); // id : number

    // remove id from the "Rooms" array
    if (index !== -1) {
        // delete Room with its data from the global server data object
        ServerData.Rooms.splice(index, 1); // Delete room id from "Rooms" where all room ids gets storaged
        delete ServerData.RoomData[id]; // Delete room with all its data from the "RoomData" Object
    };
};